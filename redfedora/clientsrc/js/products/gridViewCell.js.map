{"version":3,"sources":["../../products/gridViewCell.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,iCAUK;AAAA;;AAEwB;AAGC;AALR;;2DAQY;AAAA;AAAmB,K;;;;;;;6BANtC;AAAA;AAAW;;;;;;6BAGP;AAAA;AAAQ;;;;yBAEiB;AAAA;AAAA,a;;;;;;;;;;AAjB5C,iCAqBK;AAAA;;AACkB;AADN;;2DAIL;AAAM;AACV,4BAAqB,kDAArB;AADI;AAAG,K;;;;;;;6BAHA;AAAA;AAAK;;;;8BAC+B;AAAA;AAAA,a","file":"gridViewCell.js","sourceRoot":"/home/stewart/source/repos/redfedoraecom/redfedora/clientsrc/js","sourcesContent":["module GridCellView\n\n#load \"../app.fsx\"\n#load \"../angularFable.fsx\"\n#load \"product.fsx\"\nopen App\nopen AngularFable.NgFable\nopen Product\n\n\ntype GridCellDirective() =\n    \n    member val templateUrl = \"products/gridCell.html\" with get, set\n\n    interface IDirective with \n        member val restrict = \"EA\" with get, set\n\n    static member Factory:array<obj> = [|\"\",GridCellDirective.GetInstance|]\n    static member GetInstance() = GridCellDirective() :> IDirective\n\n\ntype GridCellCtrl(scope:IProductScope) = \n    member val Scope = scope with get,set \n    static member Factory:array<obj> = [|\"$scope\"; GridCellCtrl.GetInstance|]\n    static member GetInstance (scope:IProductScope) = \n        let ret = GridCellCtrl(scope)\n        ret.Scope.product <- Product(\"My Title\",\"My Description\")\n        ret\n\n\n\n\n\n\n\n"]}